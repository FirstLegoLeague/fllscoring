describe('ng-scores',function() {
    "use strict";
    var ngServices = factory('services/ng-services');
    var module = factory('services/ng-scores',{
        'services/ng-services': ngServices,
        'services/log': logMock
    });

    var $scores;
    var $stages;
    var $teams;
    var $q;
    var dummyTeam =  {
        number: 123,
        name: 'foo'
    };
    var rawMockStage = { id: "test", rounds: 3, name: "Test stage" };
    var rawMockScore = {
        file: 'somescore.json',
        teamNumber: 123,
        stageId: "test",
        round: 1,
        score: 150,
        originalScore: 150,
        published: false,
        edited: undefined,
        table: undefined
    };
    var mockStage;
    var mockScore;
    var mockTeam;
    var fsMock;
    var independenceMock;

    beforeEach(function() {
        fsMock = createFsMock({
            "scores.json": { version: 2, scores: [rawMockScore], sheets: [] },
            "stages.json": [rawMockStage],
            "teams.json": [dummyTeam]
        });
        independenceMock = createIndependenceMock();

        angular.mock.module(module.name);
        angular.mock.module(function($provide) {
            $provide.value('$fs', fsMock);
            $provide.value('$message', createMessageMock());
            $provide.value('$independence', independenceMock);
        });
        angular.mock.inject(["$scores", "$stages", "$teams", "$q", function(_$scores_, _$stages_, _$teams_,_$q_) {
            $scores = _$scores_;
            $stages = _$stages_;
            $teams = _$teams_;
            $q = _$q_;
        }]);

        return $stages.init().then(function() {
            mockStage = $stages.get(rawMockStage.id);
            return $teams.init();
        }).then(function() {
            mockTeam = $teams.get(dummyTeam.number);
            mockScore = {
                file: 'somescore.json',
                team: mockTeam,
                stage: mockStage,
                round: 1,
                score: 150,
                originalScore: 150
            };
            return $scores.init();
        });
    });

    // Strip autogenerated properties to (hopefully ;)) arrive at the same
    // object as what was used as input to $scores.add().
    function filteredScores() {
        return $scores.scores.map(function(score) {
            return {
                file: score.file,
                team: score.team,
                stage: score.stage,
                round: score.round,
                score: score.score,
                originalScore: score.originalScore
            };
        });
    }

    describe('load',function() {
        it('shuold read scores.json', function() {
            $scores.load().then(function() {
                expect(fsMock.read).toHaveBeenCalledWith('scores.json');
            });
        });
    });

    describe('clear',function() {
        it('should clear the scores',function() {
            expect(filteredScores()).toEqual([mockScore]);
            $scores.clear();
            expect(filteredScores()).toEqual([]);
        });
    });

    describe('create',function() {
        it('should call independence act',function() {
            $scores.create(mockScore).then(function() {
                expect(independenceMock.act).toHaveBeenCalled();
                expect(independenceMock.act.calls.mostRecent().args[0]).toBe('scores');
                expect(independenceMock.act.calls.mostRecent().args[1]).toBe('/scores/create');
            });
        });
    });

    describe('delete',function() {
        it('should call independence act',function() {
            var id = '1df9';
            $scores.delete({ id: id }).then(function() {
                expect(independenceMock.act).toHaveBeenCalled();
                expect(independenceMock.act.calls.mostRecent().args[0]).toBe('scores');
                expect(independenceMock.act.calls.mostRecent().args[1]).toBe(`/scores/delete/${id}`);
            });
        });
    });

    describe('update',function() {
        it('should call independence act',function() {
            var id = '1df9';
            $scores.update({ id: id }).then(function() {
                expect(independenceMock.act).toHaveBeenCalled();
                expect(independenceMock.act.calls.mostRecent().args[0]).toBe('scores');
                expect(independenceMock.act.calls.mostRecent().args[1]).toBe(`/scores/update/${id}`);
            });
        });
    });

});
